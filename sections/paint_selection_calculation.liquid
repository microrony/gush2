<style>
  div#shopify-section-footer{
  display: none;
}
  div#shopify-section-announcement-bar {
    display: none;
}
  sticky-header.header-wrapper.color-background-2.gradient.header-wrapper--border-bottom {
    display: none;
}
  #quickchat-button {
    display:none !important;
  }
  #quickchat-intro-div {
    display:none !important;
  }
</style>
{{ 'index.css' | asset_url | stylesheet_tag }}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<script src="https://unpkg.com/alpinejs@3.13.2/dist/cdn.min.js"></script>
{%- liquid
   assign collection_handles = ""
   for collection in collections
     if collection.handle == 'beige' or collection.handle == 'blue' or collection.handle == 'brown' or collection.handle == 'green' or collection.handle == 'grey' or collection.handle == 'neutral' or collection.handle == 'orange' or collection.handle == 'pink' or collection.handle == 'purple' or collection.handle == 'red' or collection.handle == 'white' or collection.handle == 'yellow'
       unless collection_handles == ""
         assign handle_with_separator = collection.handle | prepend: "~"
         assign collection_handles = collection_handles | append: handle_with_separator
       else
         assign collection_handles = collection_handles | append: collection.handle
       endunless
     endif
   endfor

   assign handles = collection_handles | split: "~"
-%}
<script id="all_collections__data" type="application/json">
  [
    {%- for handle in handles -%}
      {%- assign collection = collections[handle] -%}
      {
        "title": "{{ collection.title }}",
        "handle": "{{ collection.handle }}",
        "totalData":"{{ collection.products_count }}"
      }{%- unless forloop.last -%},{%- endunless -%}
    {%- endfor -%}
  ]
</script>
  <main
      x-data="{
        paintingType:'entire-house',
        isModalOpen:false,
        isDropDownOpen:false,
        currentRoomColumnIndex:0,
        isShowingPaintColumns:false,
        isPickingCeilingColor:false,
        roomTypeOptions:[
          {
            name:'Living room',
            value:'living-room'
          },
          {
            name:'Master bedroom',
            value:'master-bedroom'
          },
          {
            name:'Common bedroom',
            value:'common-bedroom'
          },
          {
            name:'Study room',
            value:'study-bedroom'
          },
          {
            name:'Toilet',
            value:'toilet'
          },
          {
            name:'Kitchen',
            value:'kitchen'
          },
          {
            name:'Common areas',
            value:'common-areas'
          },
          {
            name:'Wall/Ceiling',
            value:'wall/ceiling'
          },
        ],
        addRoomDetails(){
          this.paintDetails.roomsDetails.push({
              index:this.paintDetails.roomsDetails.length,
              name:this.roomTypeOptions[this.paintDetails.roomsDetails.length].value,
              area:0,
              color:'',
              colorImage:'',
              colorName:'',
              ceilingColor:'',
              ceilingColorImage:'',
              ceilingColorName:'' 
            })
        },
        setRoomDetails(option){
          this.floorArea = option.maxSurfaceArea
          this.paintDetails = {
            ...option,
            roomsDetails: Array.from({length: option.roomsCount}, (_, index) => ({
              index,
              name:this.roomTypeOptions[index].value ?? '',
              area:0,
              color:'',
              colorImage:'',
              colorName:'',
              ceilingColor:'',
              ceilingColorImage:'',
              ceilingColorName:''
            }))
          }
          
        },
        setColorOfRoom(color,colorName,colorImage, handle){
         if(this.isPickingCeilingColor){
          console.log('Picking color: ', handle)
          this.paintDetails.roomsDetails[this.currentRoomColumnIndex].ceilingColor = color;
          this.paintDetails.roomsDetails[this.currentRoomColumnIndex].ceilingColorName = colorName;
          this.paintDetails.roomsDetails[this.currentRoomColumnIndex].ceilingColorImage = colorImage;
          this.paintDetails.roomsDetails[this.currentRoomColumnIndex].ceilingColorHandle = handle;
         }else{
          console.log('Picking color: ', handle)
          this.paintDetails.roomsDetails[this.currentRoomColumnIndex].color = color;
          this.paintDetails.roomsDetails[this.currentRoomColumnIndex].colorName = colorName;
          this.paintDetails.roomsDetails[this.currentRoomColumnIndex].colorImage = colorImage;
          this.paintDetails.roomsDetails[this.currentRoomColumnIndex].handle = handle;
         }
         this.isModalOpen = false;
        },
        paintDetails:{
          name:'',
          value:'',
          roomsCount:0,
          roomsDetails:[]
        },
        setPaintDetailsIfRoomType(typeName){
          if(typeName){
            this.floorArea = 0;
          }
          this.paintDetails.roomsDetails=[]
          this.paintDetails.name = typeName ?? '';
          this.paintDetails.value = ''; 
          this.paintDetails.roomsCount = 1;
          this.isDropDownOpen = false;
          this.paintDetails.roomsDetails= Array.from({length: 1}, (_, index) => ({
                index,
                name:this.roomTypeOptions[0].value ?? '',
                area:0,
                color:'',
                colorImage:'',
                colorName:'',
                ceilingColor:'',
                ceilingColorImage:'',
                ceilingColorName:'' 
              }))
        },
        isShowingPaintCalculator:false,
        homeTypeList:[
          {
            slotName:'HDB',
            options:[
              {
                name:'5-room HDB (107 - 113 sqm)',
                value:'5-room-hdb-107-113-sqm',
                roomsCount:5,
                maxSurfaceArea:113
              },
              {
                name:'4-room HDB (85 - 93 sqm)',
                value:'4-room-hdb-85-93-sqm',
                roomsCount:4,
                maxSurfaceArea:93
              },
              {
                name:'3-room HDB (60 - 68 sqm)',
                value:'3-room-hdb-60-68-sqm',
                roomsCount:3,
                maxSurfaceArea: 68
              },
              {
                name:'2-room Plexi (>60 sqm)',
                value:'2-room-plexi-more-than-60sqm',
                roomsCount:2,
                maxSurfaceArea: 60
              } 
            ]
          },
          {
            slotName:'Condominium',
            options:[
              {
                name:'1 bedroom (45 - 60 sqm)',
                value:'1-bedroom-45-60-sqm',
                roomsCount:1,
                maxSurfaceArea: 60
              },
              {
                name:'2 bedroom (60 - 110 sqm)',
                value:'2-bedroom-60-110-sqm',
                roomsCount:2,
                maxSurfaceArea: 110
              },
              {
                name:'3 bedroom (110 - 140 sqm)',
                value:'3-bedroom-110-140-sqm',
                roomsCount:3,
                maxSurfaceArea: 140
              },
              {
                name:'4 bedroom (140 - 175 sqm)',
                value:'4-bedroom-140-175-sqm',
                roomsCount:4,
                maxSurfaceArea: 175
              }, 
            ]
          },
          {
            slotName:'Others',
          },
        ],
        floorArea:0,
        selectCategory(category){
          this.collectionName=category
        },
        categories:[],
        products:[],
        getCategories(){
           const dataElement = document.querySelector('#all_collections__data')
           const data = JSON.parse(dataElement.textContent)
           this.categories = data
           this.getData(data[0].handle,data[0].totalData)
        },
        getData(categoryName, totalData){
         fetch(`https://gush.earth/collections/${categoryName}?view=data-fetch&page=1`).then(res=> res.text()).then(html=> {
            const parser = new DOMParser()
            const doc = parser.parseFromString(html,'text/html')
            const dataElement = doc.querySelector('#collection__data')
            const data = JSON.parse(dataElement.textContent)
            this.products = data
            this.collectionName = categoryName
         }).catch(err=> console.log(err))
        },
      }"
      x-init="$watch('products',value=> this.products=value);$watch('categories',value=> this.categories=value); getCategories();"
      class="tw-flex tw-flex-col lg:tw-flex-row tw-gap-8 lg:tw-gap-[40px] xl:tw-gap-[62px] lg:tw-overflow-hidden tw-bg-primary tw-min-h-screen"
    >
      <div>
        <div
          class="tw-text-primary tw-hidden lg:tw-block lg:tw-w-[341px] xl:tw-w-[578px]">Paint Calculator</div>
        <img
          class="paint_selection_image lg:tw-w-[342px] xl:tw-w-[578px] lg:tw-fixed lg:tw-top-0 lg:tw-bottom-0 tw-hidden lg:tw-block tw-w-full tw-h-full tw-object-cover"
          src="https://cdn.shopify.com/s/files/1/0755/4229/8911/files/plaint_selector_dek_banner.jpg?v=1698673564"
          alt="banner"
        />
        <img
          class="tw-h-auto tw-w-full lg:tw-hidden"
          src="https://cdn.shopify.com/s/files/1/0755/4229/8911/files/plaint_selector_mobile_banner.png?v=1698673564"
          alt="banner"
        />
      </div>
      <div
        class="tw-py-0 tw-px-5 lg:tw-pr-9 lg:tw-pl-0 lg:tw-py-10 tw-max-h-xl tw-w-full tw-overflow-auto animate__animated animate__fadeInUp lg:tw-overflow-hidden relative"
      >
        <div id="painting_room_category" class="tw-flex tw-items-center tw-gap-[7px]">
          <span class="tw-text-heading tw-text-base tw-font-gt-america">
            I'm painting a
          </span>
          <label
            for="entire-house"
            class="tw-flex tw-items-center"
            @click="paintingType = 'entire-house'; isShowingPaintColumns=false;"
          >
            <input
              type="radio"
              name="painting-type"
              id="entire-house"
              class="tw-hidden i_am_painting_a"
            />
            <span x-show="paintingType !== 'entire-house' ">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="17"
                height="17"
                viewBox="0 0 17 17"
                fill="none"
              >
                <circle
                  cx="8.5"
                  cy="8.5"
                  r="7.91667"
                  fill="white"
                  stroke="black"
                  stroke-width="0.833333"
                />
              </svg>
            </span>
            <span x-show="paintingType === 'entire-house'">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="17"
                height="17"
                viewBox="0 0 17 17"
                fill="none"
              >
                <circle
                  cx="8.5"
                  cy="8.5"
                  r="7.91667"
                  fill="white"
                  stroke="black"
                  stroke-width="0.833333"
                />
                <circle
                  cx="8.5"
                  cy="8.5"
                  r="3.5"
                  fill="#FF42EF"
                />
              </svg>
            </span>

            <span
              class="tw-text-heading tw-text-base tw-font-gt-america tw-ml-[3px]"
            >
              Entire house
            </span>
          </label>
          <label
            for="room"
            class="tw-flex tw-items-center"
            @click="paintingType = 'room'; isShowingPaintColumns=true; setPaintDetailsIfRoomType() "
          >
            <input
              type="radio"
              name="painting-type"
              id="room"
              class="i_am_painting_a tw-hidden"
            />
            <span x-show="paintingType !== 'room'">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="17"
                height="17"
                viewBox="0 0 17 17"
                fill="none"
              >
                <circle
                  cx="8.5"
                  cy="8.5"
                  r="7.91667"
                  fill="white"
                  stroke="black"
                  stroke-width="0.833333"
                />
              </svg>
            </span>
            <span x-show="paintingType === 'room'">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="17"
                height="17"
                viewBox="0 0 17 17"
                fill="none"
              >
                <circle
                  cx="8.5"
                  cy="8.5"
                  r="7.91667"
                  fill="white"
                  stroke="black"
                  stroke-width="0.833333"
                />
                <circle
                  cx="8.5"
                  cy="8.5"
                  r="3.5"
                  fill="#FF42EF"
                />
              </svg>
            </span>

            <span
              class="tw-text-heading tw-text-base tw-font-gt-america tw-ml-[3px]"
            >
              Room
            </span>
          </label>
        </div>
        <!-- dropdown of home type -->
        <div
          x-show="paintingType !== 'room'"
          x-transition
          class="tw-mt-6"
        >
          <div
            class="tw-flex flex-col tw-flex-col-reverse md:tw-flex-row flex-row tw-justify-between tw-items-start"
          >
            <div class="tw-w-full lg:tw-w-2/3">
              <button
                @click="isDropDownOpen=!isDropDownOpen"
                class="tw-flex tw-p-3 tw-w-full tw-items-center tw-bg-white"
                style="min-height:50px"
              >
                <span
                  class="tw-text-heading tw-font-gt-america tw-mr-auto tw-text-base"
                >
                  Select home type
                </span>
                <span class="tw-flex tw-items-center tw-gap-7">
                  <span
                    x-text="paintDetails.name"
                    class="tw-text-heading tw-font-gt-america tw-text-base tw-font-medium"
                  ></span>
                  <span
                    :class="(isDropDownOpen ? 'bi bi-chevron-right tw-ml-auto' : 'be bi-chevron-down tw-ml-auto')+' tw-ml-6'"
                  ></span>
                </span>
              </button>
              <div
                x-transition
                x-show="isDropDownOpen"
                class="tw-w-full tw-bg-white tw-h-full tw-overflow-auto lg:tw-max-h-[500px]"
              >
                <div class="tw-border-t tw-border-primary tw-mx-3">
                  <div class="tw-grid tw-grid-cols-1 xl:tw-grid-cols-2">
                    <div class="tw-text-white">paint calculation selection</div>
                    <div id="paint_cal_home_type_selection">
                      <template
                        x-for="(homeType, index) in homeTypeList"
                        :key="index"
                      >
                        <div
                          x-data="{
                          isHomeTypeDropDownOpen:false,
                        }"
                        >
                          <button
                            class="tw-flex tw-justify-between tw-items-center tw-w-full"
                            @click="isHomeTypeDropDownOpen = !isHomeTypeDropDownOpen; homeType.slotName === 'Others' ? setPaintDetailsIfRoomType('Others') : null"
                          >
                            <p
                              x-text="homeType.slotName"
                              class="tw-text-heading tw-font-gt-america tw-py-[10px] tw-mr-auto"
                            ></p>
                            <span
                              x-show="homeType?.options"
                              :class="isHomeTypeDropDownOpen ?'bi bi-chevron-right' :'bi bi-chevron-down'"
                            ></span>
                          </button>
                          <template
                            x-for="(option,optionIndex) in homeType?.options"
                            :key="optionIndex"
                          >
                            <label
                              x-show="isHomeTypeDropDownOpen"
                              @click="paintDetails = option;isDropDownOpen = false;isHomeTypeDropDownOpen = false;setRoomDetails(option)"
                              :for="option.value"
                              :class="paintDetails.value === option.value ? 'tw-text-heading hover:tw-text-button tw-font-gt-america tw-py-[10px] tw-mx-3 tw-ml-auto tw-cursor-pointer tw-block' : 'tw-text-darkGrey tw-normal-transition hover:tw-text-button tw-font-gt-america tw-text-base tw-py-[10px] tw-mx-3 tw-ml-auto tw-cursor-pointer tw-block'"
                            >
                              <input
                                :id="option.value"
                                type="radio"
                                :value="option.value"
                                class="select_room_type tw-hidden"
                              />
                              <span x-text="option.name"></span>
                            </label>
                          </template>
                        </div>
                      </template>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              class="md:tw-w-1/3 tw-mb-5 tw-w-full lg:tw-w-1/4 xl:tw-w-[200px] md:tw-ml-5"
            >
              <div
                style="height:50px"
                class="tw-px-4 tw-py-2 lg:tw-py-1 tw-font-gt-america tw-flex tw-items-center tw-bg-white"
              >
                <input
                  :disabled="isShowingPaintColumns"
                  type="number"
                  min="0"
                  name="floorArea"
                  class="focus:tw-outline-none tw-w-2/3 input-area-surface disabled:tw-bg-transparent"
                  x-model="floorArea"
                />
                <span
                  class="tw-ml-1 input-area-surface  tw-text-black tw-w-1/3l tw-text-2xl xl:tw-text-3xl"
                >
                  sqm
                </span>
              </div>
            </div>
          </div>
        </div>

        <!-- rules of thumb -->
        <div
          x-show="!isShowingPaintColumns && paintingType !=='room'"
          class="tw-mt-10 md:tw-mt-20 lg:tw-mt-32 xl:tw-mt-40 tw-grid tw-grid-cols-1 lg:tw-grid-cols-2"
        >
          <div class="animate__animated animate__fadeIn lg:tw-mt-8">
            <p class="tw-text-heading tw-font-gt-america tw-text-base">
              As a rule of thumb, you would need
              <span class="tw-text-button font-gt-america tw-font-medium">
                1 litre for every 5 sqm.
              </span>
            </p>
            <p style="margin-top:21px;margin-bottom:21px;" class="tw-text-heading tw-font-gt-america tw-text-base">
              We always recommend 1coat of sealer and 2 coats of paint.
            </p>
          </div>
          <div class="animate__animated animate__fadeIn">
            <ul class="tw-list-none">
              <li
                class="tw-flex tw-justify-between tw-border-b tw-border-[#3021124D] tw-items-center tw-text-heading tw-font-gt-america tw-text-lg md:tw-text-xl tw-py-[9px] md:tw-py-[18px] tw-px-5"
              >
                <span class="tw-text-xl">Floor area</span>
                <span>
                  <span id="floor_area_choosen"
                    x-text="floorArea"
                    class="tw-text-heading tw-text-2xl"
                  ></span>
                  <span>sqm</span>
                </span>
              </li>
              <li
                class="tw-flex tw-justify-between tw-border-b tw-border-[#3021124D] tw-items-center tw-text-heading tw-font-gt-america tw-text-lg md:tw-text-xl tw-py-[9px] md:tw-py-[18px] tw-px-5"
              >
                <span class="tw-text-xl">Paint quantity</span>
                <span>
                  <span
                    x-text="floorArea/5"
                    class="tw-text-heading tw-text-2xl"
                  ></span>
                  <span>L</span>
                </span>
              </li>
              <li
                class="tw-flex tw-justify-between tw-border-b tw-border-[#3021124D] tw-items-center tw-text-heading tw-font-gt-america tw-text-lg md:tw-text-xl tw-py-[9px] md:tw-py-[18px] tw-px-5"
              >
                <span class="tw-text-xl">Sealer quantity</span>
                <span>
                  <span
                    x-text="floorArea/10"
                    class="tw-text-heading tw-text-2xl"
                  ></span>
                  <span>L</span>
                </span>
              </li>
            </ul>
          </div>
          <div class="tw-w-full lg:tw-col-span-2 animate__animated animate__fadeIn tw-flex-col md:tw-flex-row tw-flex tw-justify-center md:tw-justify-between tw-items-center tw-mb-5 lg:tw-mb-0">
            <button @click="isShowingPaintColumns=true" class="tw-mt-7 tw-primary-btn rounded-[2px] lg:tw-mt-40 tw-bg-white tw-overflow-hidden animate__animated animate__fadeInUp tw-relative">
              <span class="text-span tw-z-10 tw-w-[180px] tw-h-full tw-font-gt-america tw-text-left">Choose room colors</span>
              <span class="tw-absolute layer tw-inset-0 -tw-z-0 tw-bg-button tw-h-full tw-w-full"></span>
              <svg class="tw-z-10" xmlns="http://www.w3.org/2000/svg" width="11" height="20" viewBox="0 0 11 20">
                <circle cx="10" cy="10" r="1" fill="#302112"/>
                <circle cx="7" cy="13" r="1" fill="#302112" />
                <circle cx="4" cy="16" r="1" fill="#302112"/>
                <circle cx="1" cy="19" r="1" fill="#302112"/>
                <circle cx="1" cy="1" r="1" transform="matrix(-4.37114e-08 1 1 4.37114e-08 0 0)" fill="#302112"/>
                <circle cx="1" cy="1" r="1" transform="matrix(1 0 0 -1 3 5)" fill="#302112"/>
                <circle cx="1" cy="1" r="1" transform="matrix(1 0 0 -1 6 8)" fill="#302112"/>
              </svg>
            </button>
          </div>
        </div>

        <!-- paint calculator -->
        <div x-show="paintDetails.roomsDetails?.length > 0 && isShowingPaintColumns" x-transition>
          <div class="tw-flex tw-flex-1 tw-overflow-auto tw-gap-3 tw-mt-9 animate__animated animate__fadeIn">
            <template x-for="(item,index) in paintDetails?.roomsDetails" :key="index">
              <div
                x-show="paintDetails.roomsDetails.length"
                x-data="{
                  isShowingColumn:(index  === 0 ?true:(paintingType === 'room' || paintDetails.name=== 'Others')?true: false),roomType:'',
                  area:0,
                }"
              >
                <div
                  x-show="isShowingColumn"
                  class="tw-border tw-h-full tw-min-w-[300px] tw-w-[300px] tw-p-3 tw-border-lightGrey tw-font-gt-america animate__animated animated"
                >
                  <!-- main room color picker -->
                  <div
                    class="tw-flex tw-justify-between tw-gap-7 tw-mb-5 tw-items-center tw-bg-transparent"
                  >
                    <select x-model="item.name" name="roomType" class="tw-bg-transparent px-1 py-2 focus:tw-outline-none">
                      <template x-for="(room,index) in roomTypeOptions" :key="index">
                        <option x-model="room.value" x-text="room.name" :value="room.value" :selected="index === paintDetails.roomsDetails.indexOf(item)"></option>
                      </template>
                    </select>
                    <div class="tw-flex tw-items-center tw-w-[50%] tw-font-gt-america tw-text-base tw-px-1 tw-py-2 tw-bg-white">
                      <input type="number" min="0" x-model="item.area" placeholder="0" :value="item.area" class="focus:tw-outline-none tw-pl-1 tw-w-1/2"/>
                      <span class="tw-ml-1 tw-w-1/2">sqm</span>
                    </div>
                  </div>
                  <div class="tw-mt-5">
                    <div x-show="item.color" class="tw-w-full tw-mx-auto">
                      <div class="tw-h-[138px] animate__animated animate__fadeIn">
                        <img :src="'https://'+ item.colorImage" class="tw-h-full tw-w-full tw-object-center tw-object-cover tw-mx-auto" />
                      </div>
                      <div
                        class="tw-w-full tw-bg-white tw-text-heading tw-font-gt-america tw-text-base tw-text-center tw-py-1"
                      >
                        <span x-text="item.colorName"></span>
                      </div>
                    </div>
                    <button
                      x-show="!item.color"
                      @click="isModalOpen = true;isPickingCeilingColor=false;currentRoomColumnIndex=index"
                      class="tw-h-[170px] tw-w-full tw-mx-auto tw-bg-white tw-flex tw-justify-center tw-items-center tw-text-heading tw-font-gt-america tw-text-base"
                    >
                      <span class="tw-flex tw-items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="19" height="19" viewBox="0 0 19 19" fill="none">
                          <path fill-rule="evenodd" clip-rule="evenodd"
                            d="M17.4416 9.27135C17.4416 11.4625 16.5712 13.564 15.0218 15.1133C13.4724 16.6627 11.371 17.5332 9.1798 17.5332C6.98862 17.5332 4.8872 16.6627 3.3378 15.1133C1.78841 13.564 0.917969 11.4625 0.917969 9.27135C0.917969 7.08018 1.78841 4.97875 3.3378 3.42936C4.8872 1.87996 6.98862 1.00952 9.1798 1.00952C11.371 1.00952 13.4724 1.87996 15.0218 3.42936C16.5712 4.97875 17.4416 7.08018 17.4416 9.27135ZM4.58989 9.95984V8.58286H8.49131V4.68145H9.86828V8.58286H13.7697V9.95984H9.86828V13.8613H8.49131V9.95984H4.58989Z"
                            fill="#FF40F4"
                          />
                        </svg>
                      </span>
                      <span class="ml-2">Add colour</span>
                    </button>
                    <button
                      type="button"
                      @click="isModalOpen = true;isPickingCeilingColor=false;currentRoomColumnIndex=index"
                      class="tw-mt-2 tw-flex tw-mx-auto tw-justify-center tw-items-center"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14" fill="none">
                        <path fill-rule="evenodd" clip-rule="evenodd"
                          d="M0.65625 5.25005L3.12725 2.77905L3.86925 3.52105L2.66525 4.72505H8.39825V5.77505H2.66525L3.86925 6.97905L3.12725 7.72105L0.65625 5.25005ZM13.3402 8.75005L10.8693 11.2211L10.1273 10.4791L11.3313 9.27505H5.59825V8.22505H11.3313L10.1273 7.02105L10.8693 6.27905L13.3402 8.75005Z"
                          fill="#FF40F4"
                        />
                      </svg>
                      <span class="tw-ml-1 tw-underline tw-text-[10px] tw-text-heading tw-font-gt-america">
                        Change Colour
                      </span>
                    </button>
                  </div>
                  <!-- ceiling color picker -->
                  <div x-show="item.name !== 'wall/ceiling'">
                    <div
                      class="tw-flex tw-justify-between tw-mb-5 tw-items-center tw-bg-transparent tw-mt-12"
                    >
                      <span
                        class="tw-text-heading tw-font-gt-america tw-text-base"
                      >
                        Ceiling
                      </span>
                      <div
                        class="tw-flex tw-items-center tw-w-auto tw-font-gt-america tw-text-base tw-px-1 tw-py-2 tw-bg-transparent"
                      >
                        <span x-text="item.area" class="tw-pl-1 tw-bg-transparent"></span>
                        <span class="tw-ml-1 tw-w-1/2">sqm</span>
                      </div>
                    </div>
                    <div class="tw-mt-5">
                      <div x-show="item.ceilingColor" class="tw-w-full tw-mx-auto">
                        <div
                          class="tw-h-[138px] animate__animated animate__fadeIn"
                        >
                          <img :src="'https://'+ item.ceilingColorImage" class="tw-h-full tw-w-full tw-object-center tw-object-cover tw-mx-auto" />
                        </div>
                        <div
                          class="tw-w-full tw-bg-white tw-text-heading tw-font-gt-america tw-text-base tw-text-center tw-py-1"
                        >
                          <span x-text="item.ceilingColorName"></span>
                        </div>
                      </div>
                      <button
                        x-show="!item.ceilingColor"
                        @click="isModalOpen = true;isPickingCeilingColor=true;currentRoomColumnIndex=index"
                        class="tw-h-[170px] tw-w-full tw-mx-auto tw-bg-white tw-flex tw-justify-center tw-items-center tw-text-heading tw-font-gt-america tw-text-base"
                      >
                        <span class="tw-flex tw-items-center">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="19"
                            height="19"
                            viewBox="0 0 19 19"
                            fill="none"
                          >
                            <path
                              fill-rule="evenodd"
                              clip-rule="evenodd"
                              d="M17.4416 9.27135C17.4416 11.4625 16.5712 13.564 15.0218 15.1133C13.4724 16.6627 11.371 17.5332 9.1798 17.5332C6.98862 17.5332 4.8872 16.6627 3.3378 15.1133C1.78841 13.564 0.917969 11.4625 0.917969 9.27135C0.917969 7.08018 1.78841 4.97875 3.3378 3.42936C4.8872 1.87996 6.98862 1.00952 9.1798 1.00952C11.371 1.00952 13.4724 1.87996 15.0218 3.42936C16.5712 4.97875 17.4416 7.08018 17.4416 9.27135ZM4.58989 9.95984V8.58286H8.49131V4.68145H9.86828V8.58286H13.7697V9.95984H9.86828V13.8613H8.49131V9.95984H4.58989Z"
                              fill="#FF40F4"
                            />
                          </svg>
                        </span>
                        <span class="ml-2">Add colour</span>
                      </button>
                      <button
                        type="button"
                        @click="isModalOpen = true;isPickingCeilingColor=true;currentRoomColumnIndex=index"
                        class="tw-mt-2 tw-flex tw-mx-auto tw-justify-center tw-items-center"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="14"
                          height="14"
                          viewBox="0 0 14 14"
                          fill="none"
                        >
                          <path
                            fill-rule="evenodd"
                            clip-rule="evenodd"
                            d="M0.65625 5.25005L3.12725 2.77905L3.86925 3.52105L2.66525 4.72505H8.39825V5.77505H2.66525L3.86925 6.97905L3.12725 7.72105L0.65625 5.25005ZM13.3402 8.75005L10.8693 11.2211L10.1273 10.4791L11.3313 9.27505H5.59825V8.22505H11.3313L10.1273 7.02105L10.8693 6.27905L13.3402 8.75005Z"
                            fill="#FF40F4"
                          />
                        </svg>
                        <span
                          class="tw-ml-1 tw-underline tw-text-[10px] tw-text-heading tw-font-gt-america"
                        >
                          Change Colour
                        </span>
                      </button>
                    </div>
                  </div>
                </div>
                <button
                  x-show="!isShowingColumn"
                  @click="isShowingColumn=true"
                  class="tw-border tw-h-full tw-w-[300px] tw-p-3 button-light-grey tw-border-lightGrey tw-font-gt-america animate__animated animated"
                >
                  <span
                    class="tw-flex tw-min-w-[250px] tw-justify-center tw-items-center"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="20"
                      height="21"
                      viewBox="0 0 20 21"
                      fill="none"
                    >
                      <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M19 10.5C19 12.8869 18.0518 15.1761 16.364 16.864C14.6761 18.5518 12.3869 19.5 10 19.5C7.61305 19.5 5.32387 18.5518 3.63604 16.864C1.94821 15.1761 1 12.8869 1 10.5C1 8.11305 1.94821 5.82387 3.63604 4.13604C5.32387 2.44821 7.61305 1.5 10 1.5C12.3869 1.5 14.6761 2.44821 16.364 4.13604C18.0518 5.82387 19 8.11305 19 10.5ZM5 11.25V9.75H9.25V5.5H10.75V9.75H15V11.25H10.75V15.5H9.25V11.25H5Z"
                        fill="#FF40F4"
                      />
                    </svg>
                    <span
                      class="tw-text-heading tw-font-gt-america tw-text-lg tw-ml-2"
                    >
                      Add room/space
                    </span>
                  </span>
                </button>
              </div>
            </template>
            <button
              @click="addRoomDetails()"
              class="tw-border tw-w-[300px] tw-p-3 button-light-grey tw-border-lightGrey tw-font-gt-america animate__animated animated"
            >
              <span
                class="tw-flex tw-min-w-[250px] tw-justify-center tw-items-center"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="20"
                  height="21"
                  viewBox="0 0 20 21"
                  fill="none"
                >
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M19 10.5C19 12.8869 18.0518 15.1761 16.364 16.864C14.6761 18.5518 12.3869 19.5 10 19.5C7.61305 19.5 5.32387 18.5518 3.63604 16.864C1.94821 15.1761 1 12.8869 1 10.5C1 8.11305 1.94821 5.82387 3.63604 4.13604C5.32387 2.44821 7.61305 1.5 10 1.5C12.3869 1.5 14.6761 2.44821 16.364 4.13604C18.0518 5.82387 19 8.11305 19 10.5ZM5 11.25V9.75H9.25V5.5H10.75V9.75H15V11.25H10.75V15.5H9.25V11.25H5Z"
                    fill="#FF40F4"
                  />
                </svg>
                <span
                  class="tw-text-heading tw-font-gt-america tw-text-lg tw-ml-2"
                >
                  Add room/space
                </span>
              </span>
            </button>
          </div>
          <form
            action="/pages/user-journey-cart"
            class="tw-flex tw-justify-center tw-items-center md:tw-justify-start"
          >
            <input
              type="text"
              name="paintDetails"
              class="tw-hidden"
              :value="JSON.stringify({...paintDetails, sealerQuantity: Math.ceil(floorArea/10), roomsDetails:paintDetails.roomsDetails.map((room,index)=>{
                return {
                  name:room.name,
                  area:room.area,
                  color: room.color,
                  colorImage: room.colorImage,
                  colorName: room.colorName,
                  handle: room.handle,
                  quantity: Math.ceil(floorArea/5),
                  index,
                  celingProduct:{
                    area: room.area,
                    color:room.ceilingColor,
                    colorImage:room.ceilingColorImage,
                    colorName: room.ceilingColorName,
                    handle:room.ceilingColorHandle,
                    quantity: Math.ceil(floorArea/5),
                  }
                }
              })})"
            />
            <button
              class="tw-mt-7 tw-flex tw-justify-between tw-items-center tw-primary-btn rounded-[2px] lg:tw-mt-[56px] tw-mb-7 tw-bg-white tw-overflow-hidden animate__animated animate__fadeInUp tw-relative"
            >
              <span
                class="text-span tw-z-10 tw-w-[180px] tw-block tw-h-full tw-font-gt-america tw-text-left"
              >
                Calculate
              </span>
              <span
                class="tw-absolute layer tw-inset-0 -tw-z-0 tw-bg-button tw-h-full tw-w-full"
              ></span>
              <svg
                class="tw-z-10"
                xmlns="http://www.w3.org/2000/svg"
                width="11"
                height="20"
                viewBox="0 0 11 20"
              >
                <circle cx="10" cy="10" r="1" fill="#302112"/>
                <circle cx="7" cy="13" r="1" fill="#302112"/>
                <circle cx="4" cy="16" r="1" fill="#302112"/>
                <circle cx="1" cy="19" r="1" fill="#302112"/>
                <circle cx="1" cy="1" r="1" transform="matrix(-4.37114e-08 1 1 4.37114e-08 0 0)" fill="#302112"/>
                <circle cx="1" cy="1" r="1" transform="matrix(1 0 0 -1 3 5)" fill="#302112"/>
                <circle cx="1" cy="1" r="1" transform="matrix(1 0 0 -1 6 8)" fill="#302112"/>
              </svg>
            </button>
            <div class="tw-flex tw-items-center tw-mb-3 tw-ml-10 tw-mt-8">
              <svg xmlns="http://www.w3.org/2000/svg" width="14" height="13" viewBox="0 0 14 13" fill="none">
                <path
                  d="M5.94857 7.61299C5.94857 7.55296 5.94857 7.49251 5.94857 7.43248C5.94857 5.21081 5.94857 2.98956 5.9494 0.767896C5.9494 0.6706 5.9494 0.569163 5.97465 0.476421C6.06077 0.155965 6.35887 -0.033245 6.69837 0.00484538C7.00682 0.0396236 7.24778 0.303358 7.26269 0.625885C7.26765 0.73436 7.26517 0.842835 7.26517 0.951309C7.26517 3.11087 7.26517 5.27043 7.26517 7.42999V7.65398C7.33059 7.59395 7.37033 7.55958 7.4076 7.52232C8.07873 6.84911 8.74821 6.17425 9.42142 5.50311C9.72035 5.20502 10.1484 5.21081 10.4097 5.5085C10.6316 5.76147 10.6337 6.13078 10.4097 6.38623C10.3281 6.47939 10.2371 6.56385 10.1493 6.65162C9.14858 7.65274 8.14787 8.65385 7.14676 9.65455C6.78863 10.0127 6.42635 10.0131 6.06988 9.65663C4.99962 8.58637 3.92895 7.51652 2.85952 6.44502C2.56266 6.14734 2.56349 5.71799 2.85579 5.45591C3.13319 5.20709 3.51575 5.22654 3.80101 5.51098C4.34629 6.0546 4.88825 6.6007 5.43145 7.14638C5.59126 7.30703 5.74983 7.4685 5.90923 7.62997C5.92207 7.62458 5.93532 7.61879 5.94815 7.61341L5.94857 7.61299Z"
                  fill="#FF42EF" />
                <path
                  d="M6.60312 12.5622C4.63484 12.5622 2.66656 12.5626 0.698276 12.5618C0.281351 12.5618 -0.00929533 12.2749 0.000227271 11.8795C0.00767974 11.5719 0.222559 11.3139 0.525213 11.2568C0.605534 11.2415 0.689167 11.2377 0.771558 11.2377C4.66133 11.2369 8.55153 11.2365 12.4413 11.2386C12.5535 11.2386 12.6711 11.2468 12.7767 11.2804C13.0797 11.3764 13.2524 11.6721 13.2118 11.9987C13.175 12.2972 12.9108 12.5407 12.6007 12.5601C12.544 12.5639 12.4873 12.5618 12.4301 12.5618C10.4879 12.5618 8.54532 12.5618 6.60312 12.5618V12.5622Z"
                  fill="#FF42EF" />
              </svg>
              <a id="download-pdf-btn"
                href="/"
                class="tw-ml-[4px] tw-underline tw-text-heading tw-font-gt-america tw-text-sm tw-leading-[20px]">
                Save order as pdf
              </a>
            </div>
          </form>
        </div>
      </div>

      <!-- Modal -->
      <div
        x-cloak
        x-show="isModalOpen"
        @click.away="isModalOpen = false"
        class="tw-fixed tw-inset-0 tw-z-50 tw-flex tw-items-center tw-justify-center tw-bg-black tw-bg-opacity-50"
      >
        <div
          @click.stop
          class="tw-bg-primary animate__animated animate__zoomIn animate__faster tw-rounded-lg tw-py-5 tw-px-8 lg:tw-py-10 lg:tw-px-16 tw-w-11/12 tw-h-5/6 tw-overflow-y-auto"
        >
          <!-- pick a colour title and search box -->
          <div class="tw-flex tw-justify-between tw-items-start">
            <div
              class="tw-flex tw-flex-col md:tw-flex-row tw-justify-center tw-items-center"
            >
              <h1
                class="tw-text-lg tw-mb-4 md:tw-mb-0 lg:tw-text-[32px] tw-w-full"
              >
                Pick a colour
              </h1>
            </div>
            <button
              type="button"
              @click="isModalOpen = false"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="tw-h-4 tw-w-4 lg:tw-w-[28px] lg:tw-h-[28px]"
                viewBox="0 0 29 30"
                fill="none"
              >
                <line
                  y1="-1"
                  x2="39.0655"
                  y2="-1"
                  transform="matrix(-0.683949 0.72953 -0.683949 -0.72953 26.7188 0.000488281)"
                  stroke="#302112"
                  stroke-width="2"
                />
                <line
                  y1="-1"
                  x2="39.0655"
                  y2="-1"
                  transform="matrix(-0.683949 -0.72953 0.683949 -0.72953 28.5 28.4995)"
                  stroke="#302112"
                  stroke-width="2"
                />
              </svg>
            </button>
          </div>
                  
          <!-- category -->
          <div
            class="tw-flex tw-items-center tw-flex-wrap tw-gap-8 tw-mt-6"
          >
             <template x-for="(category,index) in categories" :key="index">
               <button @click="getData(category.handle, category.totalData)" class="tw-flex tw-items-center"> 
                  <span x-text="category.title" class="tw-font-gt-america tw-text-[13px] tw-uppercase tw-font-medium tw-text-heading tw-ml-[10px]"></span>
                </button>
             </template>
                
          </div>
          <label id="collectionDataLabel"></label>
          <div
            class="tw-grid tw-grid-cols-2 md:tw-grid-cols-4 lg:tw-grid-cols-4 xl:tw-grid-cols-6 2xl:tw-grid-cols-8 tw-gap-[18px] tw-w-full tw-pt-[30px]"
          >
            <template x-if="products.length > 0">
              <template
                x-for="(product,index) in products"
                :key="index"
              >
                <button
                  type="button"
                  @click="isOpen = false;isChangingColor=false;changingColorPalletIndex=null;setColorOfRoom(product.featured_image, product.title,product.images[1],product.handle)"
                  class="tw-w-full"
                >
                  <div class="tw-w-full tw-h-[170px]">
                    <img :src="'https://'+ product.images[1]" class="tw-h-full tw-w-full" />
                  </div>
                  <h1 x-text="product.title" class="tw-text-center tw-py-3 tw-font-gt-america tw-bg-white"></h1>
                </button>
              </template>
            </template>
          </div>
        </div>
      </div>
    </main>
    <script src="https://cdn.jsdelivr.net/npm/animejs@3.0.1/lib/anime.min.js"></script>
    <script>
      // Scroll to the top of the page
      function scrollToTop() {
        window.scrollTo({
          top: 0,
          behavior: 'smooth', // Use smooth scrolling for a nice animation
        })
      }

      // Call the function to scroll to the top when the page loads
      window.addEventListener('load', () => {
        scrollToTop()
      })

      function scrollIntoViewAnId(id) {
        document.getElementById(id).scrollIntoView({ behavior: 'smooth' })
      }

      const screenWidth = window.innerWidth

      anime({
        targets: '.paint_selection_image',
        width: screenWidth > 1024 ? ['0%', '578px'] : ['0%', '33.33%'],
        easing: 'easeInOutQuad',
      })

     
    </script>

{% schema %}
 {
    "name":"Paint Calculation Section",
    "settings":[
        {
            "type":"text",
            "id":"heading",
            "label":"Heading"
        }
    ],
    "blocks":[
        {
            "type":"slide",
            "name":"Slide",
            "settings":[
                {
                    "type":"image_picker",
                    "id":"img",
                    "label":"Image"
                },
              {
"id" : "vibe_collection",
"type" : "collection",
"label" : "collection"
}
            ]
        }
    ],
    "presets":[
        {
            "name":"Paint Calculation Section"
        }
    ]
}
{% endschema %}
